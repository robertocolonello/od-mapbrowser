import {html, LitElement} from '@polymer/lit-element';
window.initMap = function () { window.dispatchEvent(new CustomEvent('google-map-ready')); }; // eslint-disable-line no-unused-vars

/**
 * `od-mapbrowser`
 * OpenData on google maps
 *
 * Parameters:
 * apiKey = Google maps api Key
 * lang = google maps language
 * urlData = array of url Data
 *
 *    record element structure:
 *
 *     data: url of the api call, 
 *     detail: url of the detail api call,
 *     name: field to show in the popup (use a path if the field is in a subarray example: Details.de.Title )
 *     color: rgb color
 */
 
 
class OdMapBrowser extends LitElement {

  static get properties() {
    return {
      apiKey: {type: String},
      lang: {type: String},
      urlData: {type: Object},
      selectedMarkerId: {type: String},
      selectedInfoWindowContent: {type: String}
    };
  }

  render() {
    return html`
      <style>
        :host {
          display: block
        }
        #map {
          width: 100%;
          height: 100%;
        }
      </style>
      <div id="map"></div>
    `;
  }

  constructor() {
    super();
    this.loadedDataNr = 0;
	this.data = new Array();
	this._mapMarkers = new Array();
    
    window.addEventListener('google-map-ready', () => {

	
      this._mapRef = new google.maps.Map(this.shadowRoot.querySelector('#map'), {
        center: { lat: 40, lng: -112 },
        zoom: 5,
        streetViewControl: false,
      });
      
      this._infoWindow = new google.maps.InfoWindow(
        {content: document.createElement('div')}
      );
      this._infoWindow.addListener('closeclick', () => {
        this.selectedMarkerId = null;
      });
    });
          
    this.icon = 'data:image/svg+xml;utf-8, <svg xmlns="http://www.w3.org/2000/svg" width="30" height="47"><g data-name="Layer 2"><path d="M15 46.59a3.11 3.11 0 0 1-3.15-3c-.91-8.7-4.07-12.72-6.85-16.26C2.51 24.17.17 21.19.17 16a14.83 14.83 0 0 1 29.66 0c0 5.19-2.34 8.17-4.83 11.33-2.78 3.54-5.94 7.56-6.87 16.25A3 3 0 0 1 15 46.59z" opacity=".33"/><path fill="none" d="M0 0h30v47H0z"/><path d="M15 .17A14.84 14.84 0 0 0 .17 15c0 5.19 2.34 8.17 4.83 11.33 2.78 3.54 5.94 7.56 6.87 16.25a3.11 3.11 0 0 0 3.14 3 3 3 0 0 0 3.11-3c.93-8.69 4.09-12.71 6.87-16.25 2.49-3.16 4.83-6.14 4.83-11.33A14.84 14.84 0 0 0 15 .17z" fill="rgb(255,255,255)"/><path d="M15 2.17A12.84 12.84 0 0 0 2.17 15c0 10 9.91 10.47 11.7 27.45a1.13 1.13 0 1 0 2.26 0C17.92 25.47 27.83 25 27.83 15A12.84 12.84 0 0 0 15 2.17zm0 17.29A4.46 4.46 0 1 1 19.46 15 4.46 4.46 0 0 1 15 19.46z" fill="rgb(colortoset)"/></g></svg>';
    this.selectedIcon = 'data:image/svg+xml;utf-8, <svg xmlns="http://www.w3.org/2000/svg" width="30" height="47"><g data-name="Layer 2"><path d="M15 46.59a3.11 3.11 0 0 1-3.15-3c-.91-8.7-4.07-12.72-6.85-16.26C2.51 24.17.17 21.19.17 16a14.83 14.83 0 0 1 29.66 0c0 5.19-2.34 8.17-4.83 11.33-2.78 3.54-5.94 7.56-6.87 16.25A3 3 0 0 1 15 46.59z" opacity=".33"/><path fill="none" d="M0 0h30v47H0z"/><path d="M15 .17A14.84 14.84 0 0 0 .17 15c0 5.19 2.34 8.17 4.83 11.33 2.78 3.54 5.94 7.56 6.87 16.25a3.11 3.11 0 0 0 3.14 3 3 3 0 0 0 3.11-3c.93-8.69 4.09-12.71 6.87-16.25 2.49-3.16 4.83-6.14 4.83-11.33A14.84 14.84 0 0 0 15 .17z" fill="rgb(255,255,255)"/><path d="M15 2.17A12.84 12.84 0 0 0 2.17 15c0 10 9.91 10.47 11.7 27.45a1.13 1.13 0 1 0 2.26 0C17.92 25.47 27.83 25 27.83 15A12.84 12.84 0 0 0 15 2.17zm0 17.29A4.46 4.46 0 1 1 19.46 15 4.46 4.46 0 0 1 15 19.46z" fill="rgb(colortoset)"/></g></svg>'; 

  }
 
   _loadData(url, titleName, detailUrl, colorNr) {
	   
	fetch(url + '?pagesize=10000')
    .then(r => r.json())
    .then(data => { 
	    var deep_value = function(obj, path){
	      for (var i=0, path=path.split('.'), len=path.length; i<len; i++){
	        obj = obj[path[i]];
	      };
	      return obj;
	    };
	    var elements  = new Array();
	    var realdata = data.Items;
	    if (realdata == null) {
		   realdata = data; 
	    };
	    for (var i = 0; i < realdata.length; i++) {
		    var dict = {};
		    var item = realdata[i];
		    var name = deep_value(item, titleName);
		    dict['dataId'] = item.Id;
		    dict['Latitude'] = item.Latitude;
		    dict['Longitude'] = item.Longitude;
		    dict['Name'] = name;
		    dict['Color'] = colorNr;
		    var detailUrl2 = detailUrl + item.Id;
		    dict['InfoWindowContent'] = name + '<br><br><a href=\'' + detailUrl2 + '\' target=_new>' + detailUrl2 + '</a>';
		    elements[i] = dict;
	    }
	    
	    Array.prototype.push.apply(this.data, elements);
	    this.loadedDataNr++;
	    if (this.loadedDataNr == this._urlData.length) this._dataLoaded() 
	 });

   }
 
   _dataLoaded() {
   	  this._putMarkersOnMap();
   }

  firstUpdated() {
    this.shadowRoot.appendChild(this._mapScriptTag());
    super.firstUpdated();
  }

  _mapScriptTag() {
    const lang = 'en'
    // init google maps
    const googleMapsLoader = document.createElement('script');
    googleMapsLoader.src = `https://maps.googleapis.com/maps/api/js?key=${this.apiKey}&callback=initMap&language=${lang}`;
    googleMapsLoader.async = true;
    googleMapsLoader.defer = true;
    return googleMapsLoader;
  }

  set urlData(urlData) {
	  this.data = new Array();
	  
  for (var i = 0; i < this._mapMarkers.length; i++ ) {
    this._mapMarkers[i].setMap(null);
  }
  
  this._mapMarkers.length = 0;

    if(!urlData) return;
    this._urlData = urlData;
    this.loadedDataNr = 0;
	for (var dataNr = 0; dataNr < urlData.length; dataNr++) {
		var dt = urlData[dataNr];
		this._loadData(dt['data'], dt['name'], dt['detail'], dt['color']);
	}

  }

  get urlData() {
    return this._urlData;
  }

  set selectedMarkerId(id) {
	
    if(!this._mapMarkers) return;
    let oldMapMarker = this._mapMarkers[this._selectedMarkerId]
    let newMapMarker = this._mapMarkers[id];
    let newMarker = this.data[id];
    let iconColor = this.icon.replace("colortoset", this.data[id]['Color']);
    if(oldMapMarker) oldMapMarker.setIcon(iconColor);
    if(newMapMarker) newMapMarker.setIcon(this.selectedIcon);
    if(this._infoWindow) this._infoWindow.close();
    if(newMarker && newMarker.InfoWindowContent) {
      this._infoWindow.setContent(newMarker.InfoWindowContent);
      this._infoWindow.open(this._mapRef, newMapMarker);
    }
    this.dispatchEvent(new CustomEvent('map-pin-selected', {bubbles:true, composed:true, detail:{id:this.selectedMarkerId}}));
    this._selectedMarkerId = id;
  }

  get selectedMarkerId() {
    return this._selectedMarkerId;
  }

  _putMarkersOnMap() {


    for (var i=0; i<this.data.length; i++) {
	    
	    var dt = this.data[i];
	    let iconColor = this.icon.replace("colortoset", dt['Color']);
	    var pLatLng = {lat: dt['Latitude'], lng: dt['Longitude']};
	    var marker = new google.maps.Marker({
          position: pLatLng,
          icon: iconColor,
          title: dt['Name'],
          id: i,
          map: this._mapRef
        });

        google.maps.event.addListener(marker, 'click', (function(marker, me, i) {
                return function() {
                 me.selectedMarkerId = i;
                }
            })(marker, this, i));

            this._mapMarkers[i] = marker;
	    
    
    }

    this._setDefaultBounds ();
  }

  _setDefaultBounds () {
	  var bounds = new google.maps.LatLngBounds();
	  for (var i=0; i<this._mapMarkers.length;i++) {
		  bounds.extend(this._mapMarkers[i].getPosition());
		  
	  }
	  this._mapRef.fitBounds(bounds);  }
}

window.customElements.define('od-mapbrowser', OdMapBrowser);
